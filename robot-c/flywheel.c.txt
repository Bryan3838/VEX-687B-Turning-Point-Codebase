#pragma config(Sensor, port10, Encoder,        sensorNone)
#pragma config(Motor,  motor1,          flywheel,      tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void reset() {
    SensorValue[Encoder] = 0;
}

int calculate_power_fw(int current_ticks, int tick_goal, int threshold, int base_power, int current_power) {
    int min = tick_goal - threshold;
    int max = tick_goal + threshold;
    int power;

    if (current_ticks > max) {
        power = base_power+(((current_ticks-tick_goal)/tick_goal)*base_power);
    } else if (current_ticks < min) {
        power = base_power-(((-(current_ticks-tick_goal))/tick_goal)*base_power);
    } else {
        power = current_power; //stay same as last
    }

    return power;
}

task main()
{
    while (true) {
        
    int power = 0;
        if (vexRT[Btn8U] == 1) {
        //lower rpm
            while (vexRT[Btn8U] == 1) {
                reset();
                wait1Msec(100);
                power = calculate_power_fw(SensorValue[Encoder], 1000, 25, 50, power);
                motor[flywheel] = power;
            }

        } else if (vexRT[Btn8D] == 1) {
        //higher rpm
            while (vexRT[Btn8D] == 1) {
                reset();
                wait1Msec(100);
                power = calculate_power_fw(SensorValue[Encoder], 1500, 25, 50, power);
                motor[flywheel] = power;
            }

        } else {
            motor[flywheel] = 0;
        }
    }
}